# -*- coding: utf-8 -*-
"""TwitterSentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zp5DdYCBHoJyaj2CG6IVTa9J36dZWVi1
"""

#Mini Project on analysis of sentinment of tweets on the twitter using Twitter APIs and the tweets

#Import necessart libraries
import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import re
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")

#connecting with the twitter APIs
consumerKey="TbnPV9p9oJHloTuEiylgyBpqO"
consumerSecretKey="eMDj1PNzdQUDrLyJlY2HD03qFp8EOmz016TetKPYuKerdxXpFs"
accessKey="1226475151186747393-1f11q0L9LGL3XuG3PEsF4SgqHG99dq"
accessSecretKey="y7DtGMhECN2XIP3pZmA6t2uLEnMHuvy4lKVfyTlbHK5Ok"

#Getting Authentication from the twitter
auth=tweepy.OAuthHandler(consumerKey,consumerSecretKey)
auth.set_access_token(accessKey,accessSecretKey)
#creater API
api= tweepy.API(auth,wait_on_rate_limit=True)

#Getting the user/response from the twitter
post=api.user_timeline(screen_name=input(),count=int(input()),tweet_mode="extended")

#print some tweets from User
print("Showing some tweets from the user:\n")
i=1;
for tweet in post[0:5]:
  print(str(i)+')' + tweet.full_text +'\n')
  i+=1

#Managing the tweets using Python Magic
#creating dataframe with column named tweets
df= pd.DataFrame([tweet.full_text for tweet in post],columns=['Tweets'])
#showing first 5 tweets
df.head()

#cleaning the tweets

def cleaningTweets(text):
  text= re.sub(r'@[A-Za-z0-9]+','',text)    #Remove the @mentionedpeople with blank ''
  text=re.sub(r'#','',text)   #remove the hastags from the tweets
  text= re.sub(r'RT[\s]+','',text)  #remove the RT
  text= re.sub(r'https?:\/\/\S+','',text) #remove any hyper links
  return text
df['Tweets']=df['Tweets'].apply(cleaningTweets)

#show the cleaned text
df

#Function which will tell subjectivity of the tweet which tells how a person feels and Polarity tells the +ve,netural,-ve sense of the tweets
def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity
def getPolarity(text):
  return TextBlob(text).sentiment.polarity

#creating 2 columns for subjectivity and Polarity
df['Subjectivity']=df['Tweets'].apply(getSubjectivity)
df['Polarity']= df['Tweets'].apply(getPolarity)

#showing the subjectivity and Polarity of the tweets
df.head()

#Plotting with Word Cloud
#word cloud is like a cloud in which the most used words appers bigger than the rest 
allwords= ' '.join([tweets for tweets in df['Tweets']])
wordCloud= WordCloud(width=800,height=500,random_state=21, max_font_size=119).generate(allwords)

plt.imshow(wordCloud,interpolation="bilinear")
plt.axis('off')
plt.show()

#Function to get the Sentiments of the tweets negative, neutral, positive
def getReaction(score):
  if score<0:
    return 'Negative'
  elif score==0:
    return 'Neutral'
  else:
    return 'Positive'
#creating column for Reaction
df['Reaction']= df['Polarity'].apply(getReaction)

#showing 5 responses
df.head()

#Printing all positive tweets
count =1
sortedDf= df.sort_values(by=['Polarity'])    #sorts the value in dataframe by polarity
for i in range(0,sortedDf.shape[0]):
  if sortedDf['Reaction'][i]=='Positive':

    print(str(count)+') '+ sortedDf['Tweets'][i])
    print()
    count+=1

#Printing the negative tweets
count=1
sortedDF= df.sort_values(by=['Polarity'],ascending=False)
for i in range(0,sortedDF.shape[0]):
  if(sortedDF['Reaction'][i])=='Negative':
    print(str(count)+') '+ sortedDF['Tweets'][i])
    print()
    count+=1

#Plotting the Polarity and Subjectivity of the tweets
plt.figure(figsize=(8,6))
for i in range(0,df.shape[0]):
  plt.scatter(df['Polarity'][i],df['Subjectivity'][i], color='Blue')
plt.title("Sentiment Analysis of Tweets")
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

#Get the percentage of different Polarity of the tweets
postweets= df[df.Reaction=='Positive']
postweets= postweets['Tweets']
#%of the tweets positive one
round(postweets.shape[0]/df.shape[0]*100,1)

#Get percentage of Negative tweets
neg=df[df.Reaction=='Negative']
neg=neg['Tweets']

round((neg.shape[0]/df.shape[0] *100), 1)

#get percentage of Neutral tweets
neut= df[df.Reaction=='Neutral']
neut= neut['Tweets']

round((neut.shape[0]/df.shape[0]*100),1)

#Plotting the count of tweets
df['Reaction'].value_counts()
#plot
plt.title("Sentiment Analysis")
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['Reaction'].value_counts().plot(kind='bar')
plt.show()